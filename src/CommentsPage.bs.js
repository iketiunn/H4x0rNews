// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Data = require("./Data.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var AppStyle = require("./AppStyle.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReactCompat = require("reason-react-compat/src/ReactCompat.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReactNative = require("react-native");
var CommentsFlatList = require("./CommentsFlatList.bs.js");

var component = ReasonReact.reducerComponent("Comments");

function CommentsPage(Props) {
  var navigation = Props.navigation;
  var storyId = Belt_Option.mapWithDefault(Caml_option.nullable_to_opt(navigation.getParam("storyId")), 0, (function (id) {
          return id;
        }));
  var loadComments = function (param) {
    if (param[/* state */1][/* isLoading */1]) {
      return 0;
    } else {
      var send = param[/* send */3];
      Data.fetchStory(String(storyId)).then((function (story) {
              return Promise.resolve(Curry._1(send, /* Loaded */[story]));
            }));
      return Curry._1(send, /* Loading */0);
    }
  };
  return ReactCompat.useRecordApi(/* record */[
              /* debugName */component[/* debugName */0],
              /* reactClassInternal */component[/* reactClassInternal */1],
              /* handedOffState */component[/* handedOffState */2],
              /* willReceiveProps */component[/* willReceiveProps */3],
              /* didMount */loadComments,
              /* didUpdate */component[/* didUpdate */5],
              /* willUnmount */component[/* willUnmount */6],
              /* willUpdate */component[/* willUpdate */7],
              /* shouldUpdate */component[/* shouldUpdate */8],
              /* render */(function (self) {
                  var match = self[/* state */1][/* story */0];
                  var tmp;
                  if (match !== undefined) {
                    var story = match;
                    var match$1 = story[/* content */9];
                    var comments = match$1 !== undefined ? /* :: */[
                        Data.transStoryToComment(story),
                        story[/* comments */10]
                      ] : story[/* comments */10];
                    tmp = React.createElement(CommentsFlatList.make, {
                          data: comments
                        });
                  } else {
                    tmp = React.createElement(ReactNative.View, {
                          children: self[/* state */1][/* isLoading */1] ? React.createElement(ReactNative.ActivityIndicator, {
                                  size: "large",
                                  style: AppStyle.activityIndicator
                                }) : React.createElement(ReactNative.View, { })
                        });
                  }
                  return React.createElement(ReactNative.SafeAreaView, {
                              style: AppStyle.pageContainer,
                              children: React.createElement(ReactNative.View, {
                                    style: AppStyle.NewsPage[/* newsContainer */0],
                                    children: tmp
                                  })
                            });
                }),
              /* initialState */(function (param) {
                  return /* record */[
                          /* story */undefined,
                          /* isLoading */false
                        ];
                }),
              /* retainedProps */component[/* retainedProps */11],
              /* reducer */(function (action, state) {
                  if (action) {
                    return /* Update */Block.__(0, [/* record */[
                                /* story */action[0],
                                /* isLoading */false
                              ]]);
                  } else {
                    return /* Update */Block.__(0, [/* record */[
                                /* story */state[/* story */0],
                                /* isLoading */true
                              ]]);
                  }
                }),
              /* jsElementWrapped */component[/* jsElementWrapped */13]
            ]);
}

var make = CommentsPage;

exports.component = component;
exports.make = make;
/* component Not a pure module */
