// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var React = require("react");
var AppStyle = require("./AppStyle.bs.js");
var HtmlView = require("./HtmlView.bs.js");
var ReactCompat = require("reason-react-compat/src/ReactCompat.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReactNative = require("react-native");

var component = ReasonReact.statelessComponent("CommentsFlatList");

function CommentsFlatList(Props) {
  var data = Props.data;
  var renderComment = function (comments, first) {
    var renderItem = function (comment) {
      var item = comment.item;
      var match = item[/* user */2];
      var user = match !== undefined ? match : "[deleted]";
      var userAndTimeAge = user + (" " + item[/* time_ago */4]);
      var match$1 = List.length(item[/* comments */6]) > 0;
      return React.createElement(ReactNative.View, {
                  style: AppStyle.$$Comment[/* container */0],
                  children: null
                }, React.createElement(ReactNative.View, {
                      style: AppStyle.$$Comment[/* item */1](item[/* level */1]),
                      children: null
                    }, React.createElement(ReactNative.Text, {
                          style: AppStyle.Common[/* grayFontColor */0],
                          value: userAndTimeAge
                        }), React.createElement(HtmlView.make, {
                          content: item[/* content */5]
                        })), match$1 ? renderComment(item[/* comments */6], false) : React.createElement(ReactNative.View, { }));
    };
    var keyExtractor = function (_item, index) {
      return String(index);
    };
    var listFooterComponent = function (param) {
      if (first) {
        return React.createElement(ReactNative.Text, {
                    style: AppStyle.Common[/* textCenter */1],
                    value: "End of the thread"
                  });
      } else {
        return React.createElement(ReactNative.View, { });
      }
    };
    return React.createElement(ReactNative.FlatList, {
                data: $$Array.of_list(comments),
                ListFooterComponent: listFooterComponent,
                keyExtractor: keyExtractor,
                renderItem: renderItem,
                style: AppStyle.CommentsPage[/* paddingLeft */0]
              });
  };
  return ReactCompat.useRecordApi(/* record */[
              /* debugName */component[/* debugName */0],
              /* reactClassInternal */component[/* reactClassInternal */1],
              /* handedOffState */component[/* handedOffState */2],
              /* willReceiveProps */component[/* willReceiveProps */3],
              /* didMount */component[/* didMount */4],
              /* didUpdate */component[/* didUpdate */5],
              /* willUnmount */component[/* willUnmount */6],
              /* willUpdate */component[/* willUpdate */7],
              /* shouldUpdate */component[/* shouldUpdate */8],
              /* render */(function (_self) {
                  if (List.length(data) > 0) {
                    return renderComment(data, true);
                  } else {
                    return React.createElement(ReactNative.View, {
                                children: React.createElement(ReactNative.Text, {
                                      style: AppStyle.Common[/* textCenter */1],
                                      value: "No comments"
                                    })
                              });
                  }
                }),
              /* initialState */component[/* initialState */10],
              /* retainedProps */component[/* retainedProps */11],
              /* reducer */component[/* reducer */12],
              /* jsElementWrapped */component[/* jsElementWrapped */13]
            ]);
}

var make = CommentsFlatList;

exports.component = component;
exports.make = make;
/* component Not a pure module */
